---
title: "3) Lists and Matrices"
subtitle: "UC Berkeley, STAT 133, Spring 2025"
---


## ðŸ“– Lecture

This week in class we discuss more data objects in R, specifically __matrices__ and __lists__. 

Although we won't work with matrices that much in Stat 133, it's worth learning the following:

- Why matrices, like vectors, are atomic objects,
- In what sense a matrix is a 2-dimensional array,
- How R stores matrices,
- Functions to create matrices, and inspect their structure
- How to manipulate matrices using _bracket notation_

As for __lists__, they are the most generic kind of data container in R, and you'll learn:

- In what sense a list is a non-atomic atomic
- In what sense a list is a one-dimensional object
- How to create lists
- Different ways to manipulate lists
 


## ðŸ“š Reading

Read chapters 6, 7 and 8 of "R Coding Basics":

- <a href="https://www.gastonsanchez.com/R-coding-basics/3-01-matrices-intro.html" target="_blank">https://www.gastonsanchez.com/R-coding-basics/3-01-matrices-intro.html</a>
- <a href="https://www.gastonsanchez.com/R-coding-basics/3-02-matrices-operations.html" target="_blank">https://www.gastonsanchez.com/R-coding-basics/3-02-matrices-operations.html</a>
- <a href="https://www.gastonsanchez.com/R-coding-basics/4-01-lists.html" target="_blank">https://www.gastonsanchez.com/R-coding-basics/4-01-lists.html</a>
 


## ðŸ”¬ Lab

In lab you will practice creating and manipulating matrices and lists.

 

## ðŸŽ¯ Objectives

- Create simple matrices with `matrix()`
- Describe and give examples of matrix subsetting (subscripting, indexing)
- Explain in what sense a matrix is a 2-dimensional object
- Describe and give examples of subsetting (subscripting, indexing) of an R list
- Provide an example of list subsetting with single brackets (e.g. `lis[index]`)
- Provide an example of list subsetting with double brackets, and a single element (e.g. `lis[[index]]`) 
- Provide a manipulation example of a list with the dollar operator (e.g. `lis$wagon` )



## ðŸ”† Shiny Friday

The shiny app of this week is based on the computation of Future Value (compounding interest) in its simplest version:

$$
FV = P (1 + r)^n
$$

This is a simple app that takes three inputs:

- P = principal or initial amount (how much you deposit)
- r = annual interest rate (or rate of return)
- n = number of years

In turn, the app produces one (graphical) output which is a timeline to visualize the Future Value.


There are two versions of the app: one uses three sliders (one slider per input), and the other one uses three numeric inputs (one number per input)

- <a href="https://github.com/data133/shiny/tree/main/future-value1-numerics" target="_blank">https://github.com/data133/shiny/tree/main/future-value1-numerics</a>
- <a href="https://github.com/data133/shiny/tree/main/future-value2-sliders" target="_blank">https://github.com/data133/shiny/tree/main/future-value2-sliders</a>



## ðŸ”” HW Assignments

- HW1 due this 2/07
- HW2 released on 2/08, due 2/14
 